apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'groovy'

project.group = 'co.yellowbricks.boxed'
project.archivesBaseName = 'boxed-api'
project.version = "0.0.1.$buildId"

sourceCompatibility = 8
targetCompatibility = 8

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://nexus.int.klarna.net/content/repositories/gradle-plugins-m2-proxy/"
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

repositories {
    mavenCentral()
    jcenter()
}

ext.dropwizardVersion = '1.0.6'

mainClassName = 'co.yellowbricks.boxed.BoxedServiceStartup'
run {
    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

dependencies {
    compile(group: 'io.dropwizard', name: 'dropwizard-core', version: "$dropwizardVersion")
    compile group: 'io.dropwizard', name: 'dropwizard-jdbi', version: "$dropwizardVersion"
    compile group: 'io.dropwizard', name: 'dropwizard-migrations', version: "$dropwizardVersion"
    compile group: 'org.postgresql', name: 'postgresql', version: "9.4.1208"
    compile group: 'com.google.inject', name: 'guice', version: "4.1.0"
}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.encoding = 'UTF-8'
}

jar {
    def manifestClasspath = configurations.runtime.collect { it.getName() }.join(' ')
    manifest {
        attributes 'Build-Date': new Date(),
                   'Build-JDK': System.getProperty('java.version'),
                   'Main-Class': "$mainClassName",
                   'Class-Path': manifestClasspath,
                   'Klarna-Service-Name': "$project.archivesBaseName",
                   'Klarna-Service-Version': "$project.version"
    }
}

task copyJarToDistribution(type: Copy) {
    dependsOn jar
    from jar.archivePath
    into "$distsDir"
}

task copyDependenciesToDistribution(type: Copy) {
    from configurations.runtime
    into "$distsDir"
}

assemble {
    dependsOn copyJarToDistribution, copyDependenciesToDistribution
}

task showVersion() {
    println 'projectVersion=' + project.version
}

test {
    testLogging {
        events "skipped", "failed", "standardError"
    }
}
